# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Checks CDelivery

on:
  workflow_run:
    workflows: ["Checks CI"]
    types:
      - completed

jobs:
  release:
    name: Release
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.10.0]
    environment: production
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/checkout@v2
        with: 
            fetch-depth: 0  # Fetch all history to get tags
            ref: deploy  
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install
      
      - name: Build for Production
        run: npm run build

      - name: Get latest tag
        shell: bash
        id: get_tag
        run: echo "::set-output name=TAG_NAME::$(git describe --tags $(git rev-list --tags --max-count=1))"

  
      - name: Create new release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
          release_name: Release ${{ steps.get_tag.outputs.TAG_NAME }}
          body: |
            Release ${{ steps.get_tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload release asset 
        id: upload_release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build
          asset_name: build.zip
          asset_content_type: application/zip